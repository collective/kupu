============================================
Installing and using the GenericElementsTool
============================================

Installation of the package happens like any other Kupu tool. The template
you're integrating the tool in should contain the HTML for the toolbox, with
ids defined for certain elements. The Kupu initialize function (kupuInit())
should instantiate the tool and its toolbox, passing in a reference to the XML
island containing the elements definition (more about that later) and the ids
of the HTML elements. The tool should be registered to Kupu, and the toolbox to
the tool.

For more information about how to adjust the template or the init function, see
CUSTOMIZING.txt in the 'doc' directory of Kupu.

Setting up the XML data island
------------------------------

The template should contain a so-called 'XML data island' with the definition
of the elements. The XML should consist of the following elements:

  * <elements> - the root element, can (pretty useful if it doesn't ;) contain
    one or more <element> elements

  * <element> - a single element definition, must contain an <id> element, a
    <name> element, a <formdef> element and a <replacement> element

  * <id> (child of <element>) - the id of the element, will be saved on the 
    element in the 'genericelement_id' attribute

  * <name> (child of <element>) - a nice name for the element, will be
    presented in the UI

  * <formdef> - the form definition, this must contain one or more <field> 
    elements

  * <replacement> - definition of the replacement element, this must contain
    a <name> element and can contain one or more <properties> elements

  * <field> - the definition of a single form field, this must contain an <id>
    element, a <name> element, a <type> element and a <validator> element and
    can contain a <default> element and an <items> element

  * <id> (child of field) - the id of the form field, will be used as part of
    the attribute id of the element as it will be saved to the server, the
    tool will add a prefix ('genelprop_'), so if the id element contains 'foo'
    and the value the user has entered is 'bar' there will be an attribute on
    the element 'genelprop_foo="bar"'

  * <name> (child of field) - a nice name for the field, will be presented in 
    the user interface

  * <type> - the type of field, can be 'text', 'textarea', 'checkbox', 'radio'
    and 'select'

  * <validator> - the function name of the validator to use for validation, 
    there's a mapping called VALIDATORS that already contains some validators,
    and allows new ones to be added, more about the VALIDATOR mapping below

  * <default> - the default value of the form element, should be a double pipe
    seperated (||) string for radios and checkboxes, a string for the rest

  * <items> - a double pipe seperated list of items to present as possible 
    values, only used when 'type' is 'radio', 'checkbox' or 'select'

  * <name> (child of <replacement>) - the name of the tag to be inserted, 
    should be the name of a valid XHTML element, e.g. 'div' or 'img'

  * <properties> - attribute definition for the replacement element, can 
    contain one or more <property> elements

  * <property> - definition of a single attribute on the replacement element,
    must contain a <name> and a <value> element

  * <name> (child of <property>) - the id of the attribute, e.g. 'class' or 
    'href'

  * <value> - the value of the property, a static string

Make very sure the XML definition doesn't contain errors: this may result in
cryptic error messages.

Setting up the server
---------------------

On the server there should be two pieces of functionality available. First
there must be a script that provides pre-processed HTML, essentially this means
replacing any non-HTML elements that you want to control with the
GenericElementsTool with a replacement element, and there must be a script that
converts the replacement elements in the HTML generated by Kupu to their
non-HTML counterparts. Since setting this up is done very differently on
different platforms, I will not go into much detail about the script. Following
is a list of hints for writing those scripts:

  * a generic element will/must always have a 'genericelement_id' attribute,
    you can find the elements by scanning for this attribute

  * the 'genericelement_id' attribute will/must contain a unique identifier for
    the element type, on the server you should keep a list of what 
    genericelement_id maps to what non-HTML element

  * a generic element will/must contain a set of attributes with a 'genelprop_'
    prefix, remove the 'genelprop_' part and you have a 'name="value"' pair
    that can be used to set properties on the non-HTML element

  * a generic element will/must have an attribute called 
   'genericelements_uniqueid', make very sure it's on all generic elements in
    the data received by Kupu and Kupu will make very sure it's on all elements
    returned in its data (including elements generated by Kupu itself). Kupu 
    will make sure the id is used only on one element per page, unless an
    element is copied (in case of a copy action the genericelements_uniqueid
    is retained as requested by CNF)

The VALIDATORS mapping
----------------------

The VALIDATORS mapping is a simple JavaScript object that contains two types of
attributes, validators and error messages. Validators are plain methods that
require a single argument (the data to be validated) and return true or false.
The validator name (method name) can be attached to a field in the XML data
island (<validator> element). The ids of error messages consist of the id of
the accompanying validator and an 'Error' postfix (so if the validator is
called 'fooBar', the accompanying error should be called 'fooBarError'). They
are simple strings, that will be displayed when the validator fails. If no
error message is given for a validator a simple default message will be
presented.

As a simple example of adding your own validator we'll define one for 
validating email addresses. Note that you can place this code anywhere, as 
long as it's executed *after* the 'genericelementstool.js' was loaded.

//----------------------------------------------------------------------------
// Snippet: email validator
//----------------------------------------------------------------------------

VALIDATORS['requiredEmail'] = function(data) {
    var ereg_email = /^[^@]+@[^@]+.[^@\.]+$/; // a bit simple
    return ereg.test(data);
};

VALIDATORS['requiredEmailError'] = 'no email address supplied or email ' +
                                    'address of wrong format';

//----------------------------------------------------------------------------

When this validator is declared you can use 'requiredEmail' as the value of 
one of the form fields, if you do the emailValidator function will be used to
check whether the value of that field is okay and if not the 
emailValidatorError will be displayed.

